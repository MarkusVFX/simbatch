


#ui_tasks_forms 
    def update_form(self):
        ...
        check_str = str(act.actual_value)
        val_str = self.batch.sio.predefined.convert_predefined_variables_to_values(check_str)
        ...
        self.add_action_widget_to_form(act.name+act_name_sufix, edit_txt=val_str, evo=evolution)
        
        
#io    
    """ marker ATQ 001   on show form, on update form and on generate_script_from_action_template   """
    def convert_predefined_variables_to_values(self, check_str, param=""):
        for key, predefined_item in self.predefined.items():
            key_plus = "<" + key + ">"
            if check_str.find(key_plus) >= 0:
                function_to_eval = "self.{}(\"{}\")".format(predefined_item["function"], param)
                ...
                
                

#ui_tasks
    """ marker ATQ 010a   on click add   """
    def on_click_add_to_queue(self):    # event from: ui_tasks_form (Add to queue now)
        ...
        # marker ATQ 100
        self.collect_options_from_widgets()
        ...
        # marker ATQ 200
        form_queue_items = self.batch.que.generate_queue_items(self.batch.tsk.current_task.id, schema_options=schema_options, task_options=task_options)
        ...
        self.batch.que.add_to_queue(form_queue_items, do_save=True)



#ui_tasks_forms
    """ marker ATQ 100   generate options   """
    def collect_options_from_widgets(self):
        ...
            self.actions_options.append([opt, evo])
            or
            self.actions_options.append([opt])

    #	class AddToQueueForm(QWidget):
    #		options = []                    # all user's inputs options with parameters




#queue
    """ marker ATQ 200   generate queue items   """
    def generate_queue_items(self, task_id, evo=None, schema_options=None, task_options=None):
        ...
        # marker ATQ 202
        all_evos = self.get_evos_from_action_inputs(action_inputs)
        ...
        # marker ATQ 210
        template_queue_item = self.generate_template_queue_item(based_on_task, based_on_schema)
       
       
#queue     
    """ marker ATQ 202   generate all evos arr with scripts   """
    def get_evos_from_action_inputs(self, action_inputs):
        ...
        return all_evos
        

#queue
    """ marker ATQ 210   generate template   """
    def generate_template_queue_item(self, task, schema):
        """  generate template for multi use on add to queue process   """

#schemas
    """ marker ATQ 212   get evo scripts   """
    def get_evo_scripts_array(self, batch, evos_str, action_with_evo_index):


#queue
    """ marker ATQ 220   generate name   """
    def generate_queue_item_name(self, task, with_update=False, with_sufix=None):


#queue
    """ marker X ATQ X 230   generate script from actions  """
    def generate_script_from_Xactions(self, batch, based_on_schema, evo_scr=None, engine_index=None):
	""" marker ATQ 235   generate script from temlpate   """
	scr += act.generate_script_from_action_template(batch, with_new_line=False) + "; "

#actions
    """ marker ATQ 235   generate script from temlpate   """
    def generate_script_from_action_template(self, batch, with_new_line=False):


#io
    """ marker ATQ 240   convert var to val in script  """
    def convert_var_to_val_in_script(self, script, evo_index=None):

#io
    """ marker ATQ 242   convert var to val in command """
    def convert_var_to_val_in_command(self, command, ei_str):
    
#io
    """ marker ATQ 250   convert undefined to default   """
    def convert_undefined_to_default(self, template, evo_index=None):
    
    
    
    
    
# EVO CHECK
#patterns
    """ convert string    'BNd  2      44; sTr 1 2  '   to  'BND  2.0  44.0 ;  STR  1.0  2.0'   """
    def get_evolutions_from_string(self, evo_str):
        ...
        return evo_count_all, out_evos_array
        
        
        # use :
        # batch.pat.get_evolutions_from_string("bnd 1 2")
    
    

